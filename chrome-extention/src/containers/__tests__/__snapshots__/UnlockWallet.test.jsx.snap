// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<UnlockWallet /> should render component 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <UnlockWallet>
    <Layout>
      <Styled(MuiBox)
        display="flex"
        flex="0 0 100%"
        flexDirection="column"
        height="100%"
        justifyContent="space-between"
        maxWidth="100%"
        overflow="hidden"
      >
        <div
          className="MuiBox-root MuiBox-root-2"
        >
          <Styled(MuiBox)>
            <div
              className="MuiBox-root MuiBox-root-3"
            >
              <Styled(MuiBox)
                color="text.primary"
                fontSize={24}
              >
                <div
                  className="MuiBox-root MuiBox-root-4"
                >
                  Welcome back
                </div>
              </Styled(MuiBox)>
            </div>
          </Styled(MuiBox)>
          <Styled(MuiBox)>
            <div
              className="MuiBox-root MuiBox-root-5"
            >
              <RotationLogo
                maxWidth="230px"
              >
                <React3DRotationBox
                  minHeight="150px"
                  minWidth="auto"
                  perspective="200px"
                  rotateForce={20}
                >
                  <div
                    className="motion-box "
                    style={
                      Object {
                        "minHeight": "150px",
                        "minWidth": "auto",
                        "perspective": "200px",
                        "textAlign": "center",
                      }
                    }
                  >
                    <div
                      style={
                        Object {
                          "transform": "rotateX(0deg) rotateY(0deg)",
                          "transformStyle": "preserve-3d",
                        }
                      }
                    >
                      <img
                        alt="logo"
                        src="test-file-stub"
                        style={
                          Object {
                            "maxWidth": "230px",
                          }
                        }
                      />
                    </div>
                  </div>
                </React3DRotationBox>
              </RotationLogo>
            </div>
          </Styled(MuiBox)>
          <Styled(MuiBox)>
            <div
              className="MuiBox-root MuiBox-root-6"
            >
              <PasswordInput
                handleChange={[Function]}
                hasError={false}
                value=""
              >
                <WithStyles(ForwardRef(InputBase))
                  className="makeStyles-textField-8"
                  id="outlined-adornment-password"
                  onChange={[Function]}
                  placeholder="Password"
                  type="password"
                  value=""
                >
                  <ForwardRef(InputBase)
                    className="makeStyles-textField-8"
                    classes={
                      Object {
                        "adornedEnd": "MuiInputBase-adornedEnd",
                        "adornedStart": "MuiInputBase-adornedStart",
                        "disabled": "Mui-disabled",
                        "error": "Mui-error",
                        "focused": "Mui-focused",
                        "formControl": "MuiInputBase-formControl",
                        "fullWidth": "MuiInputBase-fullWidth",
                        "input": "MuiInputBase-input",
                        "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                        "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                        "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                        "inputMarginDense": "MuiInputBase-inputMarginDense",
                        "inputMultiline": "MuiInputBase-inputMultiline",
                        "inputSelect": "MuiInputBase-inputSelect",
                        "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                        "marginDense": "MuiInputBase-marginDense",
                        "multiline": "MuiInputBase-multiline",
                        "root": "MuiInputBase-root",
                      }
                    }
                    id="outlined-adornment-password"
                    onChange={[Function]}
                    placeholder="Password"
                    type="password"
                    value=""
                  >
                    <div
                      className="MuiInputBase-root makeStyles-textField-8"
                      onClick={[Function]}
                    >
                      <input
                        className="MuiInputBase-input"
                        id="outlined-adornment-password"
                        onAnimationStart={[Function]}
                        onBlur={[Function]}
                        onChange={[Function]}
                        onFocus={[Function]}
                        placeholder="Password"
                        type="password"
                        value=""
                      />
                    </div>
                  </ForwardRef(InputBase)>
                </WithStyles(ForwardRef(InputBase))>
              </PasswordInput>
              <Styled(MuiBox)
                color="text.secondary"
                fontSize="10px"
                mt={1}
              >
                <div
                  className="MuiBox-root MuiBox-root-29"
                >
                  To continue, please unlock your wallet
                </div>
              </Styled(MuiBox)>
            </div>
          </Styled(MuiBox)>
          <Styled(MuiBox)
            alignItems="center"
            display="flex"
            flexDirection="row"
            justifyContent="center"
          >
            <div
              className="MuiBox-root MuiBox-root-30"
            >
              <BaseButton
                disabled={false}
                fullWidth={false}
                handleClick={[Function]}
                icon={true}
                reject={false}
                small={false}
                testID="unlock-wallet-button"
                text="Unlock Wallet"
              >
                <WithStyles(ForwardRef(Button))
                  className="makeStyles-button-31"
                  color="inherit"
                  data-test-id="unlock-wallet-button"
                  disabled={false}
                  onClick={[Function]}
                  style={Object {}}
                  variant="contained"
                >
                  <ForwardRef(Button)
                    className="makeStyles-button-31"
                    classes={
                      Object {
                        "colorInherit": "MuiButton-colorInherit",
                        "contained": "MuiButton-contained",
                        "containedPrimary": "MuiButton-containedPrimary",
                        "containedSecondary": "MuiButton-containedSecondary",
                        "disabled": "Mui-disabled",
                        "focusVisible": "Mui-focusVisible",
                        "fullWidth": "MuiButton-fullWidth",
                        "label": "MuiButton-label",
                        "outlined": "MuiButton-outlined",
                        "outlinedPrimary": "MuiButton-outlinedPrimary",
                        "outlinedSecondary": "MuiButton-outlinedSecondary",
                        "root": "MuiButton-root",
                        "sizeLarge": "MuiButton-sizeLarge",
                        "sizeSmall": "MuiButton-sizeSmall",
                        "text": "MuiButton-text",
                        "textPrimary": "MuiButton-textPrimary",
                        "textSecondary": "MuiButton-textSecondary",
                      }
                    }
                    color="inherit"
                    data-test-id="unlock-wallet-button"
                    disabled={false}
                    onClick={[Function]}
                    style={Object {}}
                    variant="contained"
                  >
                    <WithStyles(ForwardRef(ButtonBase))
                      className="MuiButton-root makeStyles-button-31 MuiButton-contained MuiButton-colorInherit"
                      component="button"
                      data-test-id="unlock-wallet-button"
                      disabled={false}
                      focusRipple={true}
                      focusVisibleClassName="Mui-focusVisible"
                      onClick={[Function]}
                      style={Object {}}
                      type="button"
                    >
                      <ForwardRef(ButtonBase)
                        className="MuiButton-root makeStyles-button-31 MuiButton-contained MuiButton-colorInherit"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "focusVisible": "Mui-focusVisible",
                            "root": "MuiButtonBase-root",
                          }
                        }
                        component="button"
                        data-test-id="unlock-wallet-button"
                        disabled={false}
                        focusRipple={true}
                        focusVisibleClassName="Mui-focusVisible"
                        onClick={[Function]}
                        style={Object {}}
                        type="button"
                      >
                        <button
                          className="MuiButtonBase-root MuiButton-root makeStyles-button-31 MuiButton-contained MuiButton-colorInherit"
                          data-test-id="unlock-wallet-button"
                          disabled={false}
                          onBlur={[Function]}
                          onClick={[Function]}
                          onDragLeave={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          onKeyUp={[Function]}
                          onMouseDown={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                          style={Object {}}
                          tabIndex={0}
                          type="button"
                        >
                          <span
                            className="MuiButton-label"
                          >
                            Unlock Wallet
                            <ForwardRef
                              className="makeStyles-arrowRight-33"
                              style={
                                Object {
                                  "opacity": 1,
                                }
                              }
                            >
                              <WithStyles(ForwardRef(SvgIcon))
                                className="makeStyles-arrowRight-33"
                                style={
                                  Object {
                                    "opacity": 1,
                                  }
                                }
                              >
                                <ForwardRef(SvgIcon)
                                  className="makeStyles-arrowRight-33"
                                  classes={
                                    Object {
                                      "colorAction": "MuiSvgIcon-colorAction",
                                      "colorDisabled": "MuiSvgIcon-colorDisabled",
                                      "colorError": "MuiSvgIcon-colorError",
                                      "colorPrimary": "MuiSvgIcon-colorPrimary",
                                      "colorSecondary": "MuiSvgIcon-colorSecondary",
                                      "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                      "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                      "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                      "root": "MuiSvgIcon-root",
                                    }
                                  }
                                  style={
                                    Object {
                                      "opacity": 1,
                                    }
                                  }
                                >
                                  <svg
                                    aria-hidden="true"
                                    className="MuiSvgIcon-root makeStyles-arrowRight-33"
                                    focusable="false"
                                    role="presentation"
                                    style={
                                      Object {
                                        "opacity": 1,
                                      }
                                    }
                                    viewBox="0 0 24 24"
                                  >
                                    <path
                                      d="M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z"
                                    />
                                  </svg>
                                </ForwardRef(SvgIcon)>
                              </WithStyles(ForwardRef(SvgIcon))>
                            </ForwardRef>
                          </span>
                          <NoSsr>
                            <WithStyles(undefined)
                              center={false}
                            >
                              <ForwardRef(TouchRipple)
                                center={false}
                                classes={
                                  Object {
                                    "child": "MuiTouchRipple-child",
                                    "childLeaving": "MuiTouchRipple-childLeaving",
                                    "childPulsate": "MuiTouchRipple-childPulsate",
                                    "ripple": "MuiTouchRipple-ripple",
                                    "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                    "rippleVisible": "MuiTouchRipple-rippleVisible",
                                    "root": "MuiTouchRipple-root",
                                  }
                                }
                              >
                                <span
                                  className="MuiTouchRipple-root"
                                >
                                  <TransitionGroup
                                    childFactory={[Function]}
                                    component={null}
                                    exit={true}
                                  />
                                </span>
                              </ForwardRef(TouchRipple)>
                            </WithStyles(undefined)>
                          </NoSsr>
                        </button>
                      </ForwardRef(ButtonBase)>
                    </WithStyles(ForwardRef(ButtonBase))>
                  </ForwardRef(Button)>
                </WithStyles(ForwardRef(Button))>
              </BaseButton>
            </div>
          </Styled(MuiBox)>
        </div>
      </Styled(MuiBox)>
    </Layout>
  </UnlockWallet>
</Provider>
`;
